name: Deploy Cosmos DB

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      location:
        description: 'Azure region to deploy to'
        required: true
        default: 'eastus'
        type: string

jobs:
  deploy-cosmos-db:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Deploy Cosmos DB ARM Template
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
          template: ./infrastructure/arm-templates/cosmos-db.json
          parameters: ./infrastructure/arm-templates/parameters/cosmos-db-${{ github.event.inputs.environment }}.parameters.json
          deploymentName: deploy-fbwordle-cosmos-${{ github.event.inputs.environment }}-${{ github.run_number }}
          deploymentMode: Incremental
          
      - name: Get Cosmos DB Output
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
          template: ./infrastructure/arm-templates/cosmos-db.json
          parameters: ./infrastructure/arm-templates/parameters/cosmos-db-${{ github.event.inputs.environment }}.parameters.json
          deploymentName: output-fbwordle-cosmos-${{ github.event.inputs.environment }}-${{ github.run_number }}
          deploymentMode: Validate
          
      - name: Output Deployment Information
        run: |
          echo "Cosmos DB Account Name: ${{ steps.deploy.outputs.cosmosDbAccountName }}"
          echo "Cosmos DB Endpoint: ${{ steps.deploy.outputs.cosmosDbEndpoint }}"
          echo "Database Name: ${{ steps.deploy.outputs.databaseName }}"
          echo "Stats Container: ${{ steps.deploy.outputs.statsContainerName }}"
          echo "Words Container: ${{ steps.deploy.outputs.wordsContainerName }}"
          
      - name: Save Connection String to GitHub Secrets
        run: |
          COSMOS_DB_ACCOUNT_NAME="${{ steps.deploy.outputs.cosmosDbAccountName }}"
          AZURE_RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
          CONNECTION_STRING=$(az cosmosdb keys list --type connection-strings --name "$COSMOS_DB_ACCOUNT_NAME" --resource-group "$AZURE_RESOURCE_GROUP" --query "connectionStrings[0].connectionString" -o tsv)
          echo "::add-mask::$CONNECTION_STRING"
          echo "COSMOS_DB_CONNECTION_STRING=$CONNECTION_STRING" >> $GITHUB_ENV
          
          # If you want to update a GitHub secret, you'd need to use the GitHub API
          # This would require additional setup and permissions
          echo "Connection string retrieved and masked for security"
          echo "To update the GitHub secret, manually copy this value to the repository secrets"
